extends ColorRect

@onready var glitch_material: ShaderMaterial

var glitch_active = false


func _ready():
	if material is ShaderMaterial:
		glitch_material = material
	else:
		glitch_material = ShaderMaterial.new()
		glitch_material.shader = load("res://glitch.gdshader")  
		material = glitch_material 

	# Ensure the material exists


func apply_glitch(intensity: float, chroma: float, compression: float, datamosh: float, duration: float):
	if glitch_active:
		return  

	glitch_active = true  

	glitch_material.set_shader_parameter("glitch_intensity", intensity)
	glitch_material.set_shader_parameter("chromatic_aberration", chroma)
	glitch_material.set_shader_parameter("compression_artifact", compression)
	glitch_material.set_shader_parameter("datamosh_amount", datamosh)

	await get_tree().create_timer(duration).timeout  

	if $SubViewportContainer/SubViewport/Node3D/CharacterBody3D.health >= 10:
		glitch_material.set_shader_parameter("glitch_intensity", 0.0)
		glitch_material.set_shader_parameter("chromatic_aberration", 0.0)
		glitch_material.set_shader_parameter("compression_artifact", 0.0)
		glitch_material.set_shader_parameter("datamosh_amount", 0.0)

	glitch_active = false  
